package main

import (
    "encoding/json"
    "fmt"
    "log"
    "net/http"
    "os"
    "strings"
    "github.com/joho/godotenv"

    tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type UserSession struct {
    Step string
    Data map[string]string
}

var userState = make(map[int64]string)
var sessions = make(map[int64]*UserSession)

func main() {
    
    err := godotenv.Load()
    if err != nil {
        log.Println("Warning: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env —Ñ–∞–π–ª")
    }

    bot, err := tgbotapi.NewBotAPI(os.Getenv("TELEGRAM_TOKEN"))
    if err != nil {
        log.Panic(err)
    }

    bot.Debug = true
    log.Printf("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @%s", bot.Self.UserName)

    u := tgbotapi.NewUpdate(0)
    u.Timeout = 60
    updates := bot.GetUpdatesChan(u)

    for update := range updates {
        if update.Message == nil {
            continue
        }

        chatID := update.Message.Chat.ID
        text := update.Message.Text
        username := update.Message.From.UserName

        session, hasSession := sessions[chatID]

        if hasSession {
            switch session.Step {
            case "waiting_course_subject":
                session.Data["–ü—Ä–µ–¥–º–µ—Ç"] = text
                session.Step = "waiting_course_site"
                bot.Send(tgbotapi.NewMessage(chatID, "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –≥–æ—Ç–æ–≤—ã–π —Å–∞–π—Ç? (–î–∞ / –ù–µ—Ç)"))
                continue
            case "waiting_course_site":
                session.Data["–ì–æ—Ç–æ–≤—ã–π —Å–∞–π—Ç"] = text
                saveToFile(username, chatID, "–ö—É—Ä—Å–æ–≤–∞—è", session.Data)
                delete(sessions, chatID)
                bot.Send(tgbotapi.NewMessage(chatID, "–°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ –ø–æ –∫—É—Ä—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∞–Ω—ã."))
                continue
            case "waiting_practice_subject":
                session.Data["–ü—Ä–µ–¥–º–µ—Ç"] = text
                session.Step = "waiting_practice_site"
                bot.Send(tgbotapi.NewMessage(chatID, "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –≥–æ—Ç–æ–≤—ã–π —Å–∞–π—Ç? (–î–∞ / –ù–µ—Ç)"))
                continue
            case "waiting_practice_site":
                session.Data["–ì–æ—Ç–æ–≤—ã–π —Å–∞–π—Ç"] = text
                saveToFile(username, chatID, "–ü—Ä–∞–∫—Ç–∏–∫–∞", session.Data)
                delete(sessions, chatID)
                bot.Send(tgbotapi.NewMessage(chatID, "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∞–∫—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞."))
                continue
            case "waiting_teacher_name":
                session.Data["–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"] = text
                session.Step = "waiting_course_number"
                bot.Send(tgbotapi.NewMessage(chatID, "–£–∫–∞–∂–∏—Ç–µ –∫—É—Ä—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 –∫—É—Ä—Å):"))
                continue
            case "waiting_course_number":
                session.Data["–ö—É—Ä—Å"] = text
                saveToFile(username, chatID, "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è", session.Data)
                delete(sessions, chatID)
                bot.Send(tgbotapi.NewMessage(chatID, "–°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."))
                continue
            }
        }

        switch text {
        case "/start":
            sendMainMenu(bot, chatID)
        case "üìö –ö—É—Ä—Å–æ–≤–∞—è":
            sessions[chatID] = &UserSession{Step: "waiting_course_subject", Data: make(map[string]string)}
            bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∫—É—Ä—Å–æ–≤–æ–π:"))
        case "üß™ –ü—Ä–∞–∫—Ç–∏–∫–∞":
            sessions[chatID] = &UserSession{Step: "waiting_practice_subject", Data: make(map[string]string)}
            bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–∞–∫—Ç–∏–∫–∏:"))
        case "üìù –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è":
            sessions[chatID] = &UserSession{Step: "waiting_teacher_name", Data: make(map[string]string)}
            bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:"))
        case "‚òÅÔ∏è –ü–æ–≥–æ–¥–∞":
            weather := getWeather("Simferopol")
            bot.Send(tgbotapi.NewMessage(chatID, weather))
        default:
            bot.Send(tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏ /start."))
        }
    }
}

func sendMainMenu(bot *tgbotapi.BotAPI, chatID int64) {
    keyboard := tgbotapi.NewReplyKeyboard(
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("üìö –ö—É—Ä—Å–æ–≤–∞—è"),
            tgbotapi.NewKeyboardButton("üìù –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è"),
        ),
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("üß™ –ü—Ä–∞–∫—Ç–∏–∫–∞"),
            tgbotapi.NewKeyboardButton("‚òÅÔ∏è –ü–æ–≥–æ–¥–∞"),
        ),
    )

    msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é:")
    msg.ReplyMarkup = keyboard
    bot.Send(msg)
}

func getWeather(city string) string {
    apiKey := os.Getenv("OPENWEATHER_TOKEN")
    if apiKey == "" {
        return "API –∫–ª—é—á OpenWeather –Ω–µ –∑–∞–¥–∞–Ω."
    }

    url := fmt.Sprintf("https://api.openweathermap.org/data/2.5/weather?q=%s&appid=%s&units=metric&lang=ru", city, apiKey)
    resp, err := http.Get(url)
    if err != nil {
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã."
    }
    defer resp.Body.Close()

    var data map[string]interface{}
    json.NewDecoder(resp.Body).Decode(&data)

    if data["main"] == nil {
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."
    }

    main := data["main"].(map[string]interface{})
    weatherArr := data["weather"].([]interface{})
    description := weatherArr[0].(map[string]interface{})["description"].(string)
    temp := main["temp"].(float64)

    return fmt.Sprintf("üå§ –ü–æ–≥–æ–¥–∞ –≤ –°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª–µ:\n%s, %.1f¬∞C", strings.Title(description), temp)
}

func saveToFile(username string, chatID int64, title string, fields map[string]string) {
    file, err := os.OpenFile("data.txt", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
    if err != nil {
        log.Println("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª:", err)
        return
    }
    defer file.Close()

    if username == "" {
        username = "(–±–µ–∑ username)"
    }

    fmt.Fprintf(file, "[Username: %s | UserID: %d]\n–¢–∏–ø: %s\n", username, chatID, title)
    for k, v := range fields {
        fmt.Fprintf(file, "%s: %s\n", k, v)
    }
    fmt.Fprintln(file, "---")
}

